/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Inicio;

import Conexion.ConexionBD;
import Registro.Registro;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import static java.lang.Integer.parseInt;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Adrián
 */
public class PrincipalGestion extends javax.swing.JFrame {

    /**
     * Creates new form PrincipalGestion
     */
    static String tip;
    static String accion;
    String valor;
    Connection conexion = ConexionBD.conexion();
    DefaultTableModel modelo;
    int seleccion = 0;
    static String nB;
    Elegir e;
    NModificar nm;
    nRecambio nr;

    // seleccion = table.getSelectedRow();
    /*
     DefaultTableModel modelo;
    Connection conexion = ConexionBD.conexion();

    public PrincipalUsuario() throws SQLException {
        initComponents();
        modelo = (DefaultTableModel) tabla.getModel();
        rellenoTabla();
        rellenoMarcas();

    }
     */
    public PrincipalGestion() throws SQLException {
        OpcionesEmpresa oe = new OpcionesEmpresa(this, false);//= new OpcionesEmpresa(this , false);
        oe.setVisible(false);
        valor = oe.getValor();
        System.out.println(valor);
        initComponents();
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((pantalla.width / 2) - (this.getWidth() / 2), (pantalla.height / 2) - (this.getHeight() / 2));
        modelo = (DefaultTableModel) table.getModel();
        rellenarJC(valor);
        rellenarTabla(valor);
        rellenarBotones();
        getContentPane().setBackground(Color.white);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        lbl1 = new javax.swing.JLabel();
        cbMarca = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        cbModelo = new javax.swing.JComboBox<>();
        lbl2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnAñadir = new javax.swing.JLabel();
        btnModificar = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JLabel();
        icono = new javax.swing.JLabel();
        pnlRecambio = new javax.swing.JPanel();
        btnVender = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        btnComprar = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnVolver = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        lbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl1.setText("Marca");

        cbMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMarcaActionPerformed(evt);
            }
        });

        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        cbModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbModeloActionPerformed(evt);
            }
        });

        lbl2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl2.setText("Modelo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addComponent(cbMarca, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl2, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(cbModelo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl1)
                            .addComponent(lbl2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título 1", "Título 2"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(210, 220, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        btnAñadir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAñadirMouseClicked(evt);
            }
        });

        btnModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarMouseClicked(evt);
            }
        });

        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(icono, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(icono, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );

        pnlRecambio.setBackground(new java.awt.Color(255, 255, 255));

        btnVender.setText("Vender");
        btnVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVenderActionPerformed(evt);
            }
        });

        jLabel1.setText("Cantidad");

        btnComprar.setText("Comprar");
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRecambioLayout = new javax.swing.GroupLayout(pnlRecambio);
        pnlRecambio.setLayout(pnlRecambioLayout);
        pnlRecambioLayout.setHorizontalGroup(
            pnlRecambioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRecambioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(btnVender, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(btnComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlRecambioLayout.setVerticalGroup(
            pnlRecambioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRecambioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRecambioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlRecambioLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnVender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnComprar, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlRecambioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar1.setRollover(true);

        btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverMouseClicked(evt);
            }
        });
        jToolBar1.add(btnVolver);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlRecambio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlRecambio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMarcaActionPerformed
        try {
            cbModelo.removeAllItems();
            Statement s = conexion.createStatement();
            int i = 0;
            int num = 0;
            ResultSet rs1 = s.executeQuery("SELECT  mo.Nombre "
                    + "                    FROM  modelo mo , marca ma "
                    + "                    WHERE mo.A_Marca= ma.p_Marca "
                    + "                     AND ma.nombre = '" + cbMarca.getSelectedItem().toString() + "'");
            while (rs1.next()) {
                num++;
            }
            ResultSet query2 = s.executeQuery("SELECT  mo.Nombre "
                    + "                    FROM  modelo mo , marca ma "
                    + "                    WHERE mo.A_Marca= ma.p_Marca "
                    + "                     AND ma.nombre = '" + cbMarca.getSelectedItem().toString() + "'");
            String[] modelos = new String[num];

            while (query2.next()) {
                //System.out.println(" " + query.getString(1));
                modelos[i] = query2.getString(1);
                i++;

            }
            for (int j = 0; j < modelos.length; j++) {
                //System.out.println(marcas[j]);
                cbModelo.addItem(modelos[j]);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbMarcaActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        seleccion++;
        try {
            System.out.println(modelo.getRowCount());

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.removeRow(i);
                i -= 1;

            }
            String n = valor.toLowerCase();
            Statement s = conexion.createStatement();
            System.out.println(valor);
            if (valor == "Pieza") {
                System.out.println(cbMarca.getSelectedItem().toString());
                Object nuevaFila[] = {"Pieza", "Tipo"};
                modelo.setColumnIdentifiers(nuevaFila);
                ResultSet rs = s.executeQuery("SELECT  mo.Nombre ,ma.Nombre "
                        + "                    FROM pieza mo , tipo ma "
                        + "                    WHERE mo.A_Tipo = ma.P_Tipo "
                        + "                    AND ma.Nombre= '" + cbMarca.getSelectedItem().toString() + "'");

                while (rs.next()) {
                    Object[] fila = new Object[2];
                    for (int i = 0; i < 2; i++) {
                        fila[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(fila);
                }
            } else {
                if (valor == "Marca") {
                    Object nuevaFila[] = {"Marca", "Modelo", "Año de Salida", "Año de final de fabricacion"};
                    modelo.setColumnIdentifiers(nuevaFila);
                    System.out.println(cbMarca.getSelectedItem().toString());
                    ResultSet rs = s.executeQuery("SELECT  ma.Nombre , mo.Nombre , mo.AnoSalida , mo.AnoExtincion "
                            + "                    FROM modelo mo , marca ma "
                            + "                    WHERE mo.A_Marca = ma.P_Marca "
                            + "                    AND ma.Nombre= '" + cbMarca.getSelectedItem().toString() + "' "
                            + "                    AND mo.Nombre LIKE '%" + cbModelo.getSelectedItem().toString() + "%'");

                    while (rs.next()) {
                        Object[] fila = new Object[4];
                        for (int i = 0; i < 4; i++) {
                            fila[i] = rs.getObject(i + 1);
                        }
                        modelo.addRow(fila);
                    }
                }
                if (valor == "Recambio") {

                    //System.out.println(cbMarca.getSelectedItem().toString());
                    Object nuevaFila[] = {"Recambio", "Marca", "Modelo", "Desguace", "Cantidad disponible"};
                    modelo.setColumnIdentifiers(nuevaFila);
                    ResultSet rs = s.executeQuery("SELECT p.Nombre as Recambio, ma.Nombre as Marca, mo.Nombre as Modelo, d.Nombre as Desguace, r.CantidadDisponible as Cantidad\n"
                            + "FROM pieza p , modelo mo , marca ma , desguace d , recambio r\n"
                            + "WHERE \n"
                            + "    r.A_Pieza=p.P_Pieza\n"
                            + "AND\n"
                            + "    mo.P_Modelo=r.A_Modelo\n"
                            + "AND \n"
                            + "    ma.P_Marca = mo.A_Marca\n"
                            + "AND \n"
                            + "    d.P_Desguace=r.A_Desguace\n"
                            + "                 ");

                    while (rs.next()) {
                        Object[] fila = new Object[5];
                        for (int i = 0; i < 5; i++) {
                            fila[i] = rs.getObject(i + 1);
                        }
                        modelo.addRow(fila);
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(PrincipalUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked

    }//GEN-LAST:event_tableMouseClicked

    private void cbModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbModeloActionPerformed

    private void btnVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVenderActionPerformed
        // TODO add your handling code here:
        try {
            Statement s = conexion.createStatement();

            int row = table.getSelectedRow();

            String modificar = "UPDATE recambio SET CantidadDisponible = CantidadDisponible-" + txtCantidad.getText() + " WHERE P_Recambio=" + (row + 1) + "";
            System.out.println(modificar);
            s.executeUpdate(modificar);
            this.dispose();
            PrincipalGestion reload = new PrincipalGestion();
            reload.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnVenderActionPerformed

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        // TODO add your handling code here:
        try {
            Statement s = conexion.createStatement();
            int row = table.getSelectedRow();

            String modificar = "UPDATE recambio SET CantidadDisponible = CantidadDisponible+" + txtCantidad.getText() + " WHERE P_Recambio=" + (row + 1) + "";
            s.executeUpdate(modificar);
            this.dispose();
            PrincipalGestion reload = new PrincipalGestion();
            reload.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnComprarActionPerformed

    private void btnModificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMouseClicked
        // TODO add your handling code here:
        setAccion("Modificar");

        int p = 0;

        try {
            Statement s = conexion.createStatement();
            int row = table.getSelectedRow();
            if (row != -1) {
                if (valor == "Pieza") {
                    setTipo("pieza");
                    Object end = modelo.getValueAt(row, 0);
                    setNombre(end.toString());
                    nm = new NModificar(this, "Modificar", true);
                    nm.setVisible(true);
                }
                if (valor == "Marca") {
                    setTipo("modelo");

                    Object end = modelo.getValueAt(row, 1);
                    Object salida = modelo.getValueAt(row, 2);
                    System.out.println(end.toString());
                    //setNombre(end.toString());
                    ResultSet resultRell = s.executeQuery("SELECT p.P_Modelo "
                            + "                    FROM modelo p "
                            + "                    WHERE p.Nombre = '" + end.toString() + "'"
                            + "                    AND p.AnoSalida = '" + salida.toString() + "'");
                    while (resultRell.next()) {
                        p = resultRell.getInt(1);
                    }
                    setNombre(p + "");
                    nm = new NModificar(this, "Modificar", true);
                    nm.setVisible(true);
                }
                if (valor == "Recambio") {
                    setTipo(valor);
                    row = row + 1;
                    setNombre(row + "");
                    System.out.println(getNombre());
                    nRecambio rec = new nRecambio(this, true);
                    rec.setVisible(true);
                    this.dispose();
                    System.out.println("Hecho");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona un modelo a modificar");
            }

            //e = new Elegir(this, true);
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
        //e.setVisible(true);
    }//GEN-LAST:event_btnModificarMouseClicked

    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked

        // TODO add your handling code here:
        System.out.println("\"Eliminar\"");
        int row = table.getSelectedRow();

        try {
            Statement s = conexion.createStatement();
            if (valor == "Recambio") {
                System.out.println("Recambio");
                row = row + 1;
                s.executeUpdate("DELETE FROM recambio WHERE P_Recambio = " + row);
            }
            if (valor == "Marca") {
                System.out.println("Marca");
                int id = 0;
                System.out.println(row);
                if (row == -1) {
                    JOptionPane.showMessageDialog(this, "Selecciona un modelo para borrarlo");
                } else {
                    Object nombreMo = modelo.getValueAt(row, 1);
                    Object anoMo = modelo.getValueAt(row, 2);
                    System.out.println("Modelo: " + nombreMo.toString());
                    System.out.println("Salida: " + anoMo.toString());
                    ResultSet resultRell = s.executeQuery("SELECT p.P_Modelo "
                            + "                    FROM modelo p "
                            + "                    WHERE p.Nombre = '" + nombreMo.toString() + "'"
                            + "                    AND p.AnoSalida = '" + anoMo.toString() + "'");
                    while (resultRell.next()) {
                        id = resultRell.getInt(1);
                    }
                    System.out.println("p:" + id);
                    s.executeUpdate("DELETE FROM modelo WHERE P_Modelo = " + id);
                }
            }
            System.out.println("Intento");
            this.dispose();
            PrincipalGestion reload = new PrincipalGestion();
            reload.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEliminarMouseClicked

    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked
        // TODO add your handling code here:
        this.dispose();
        Registro r = new Registro();
        r.setVisible(true);
    }//GEN-LAST:event_btnVolverMouseClicked

    private void btnAñadirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAñadirMouseClicked
        // TODO add your handling code here:
        try {
            setAccion("Añadir");
            if (valor == "Pieza") {
                setTipo(valor);
                e = new Elegir(this, true);
                e.setVisible(true);
            }
            if (valor == "Marca") {
                setTipo(valor);
                e = new Elegir(this, true);
                e.setVisible(true);
            }
            if (valor == "Recambio") {
                setTipo(valor);
                nRecambio nr;
                nr = new nRecambio(this, true);
                nr.setVisible(true);

            }

        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAñadirMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PrincipalGestion().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnAñadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnComprar;
    private javax.swing.JLabel btnEliminar;
    private javax.swing.JLabel btnModificar;
    private javax.swing.JButton btnVender;
    private javax.swing.JLabel btnVolver;
    private javax.swing.JComboBox<String> cbMarca;
    private javax.swing.JComboBox<String> cbModelo;
    private javax.swing.JLabel icono;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JPanel pnlRecambio;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtCantidad;
    // End of variables declaration//GEN-END:variables
    public static String getTipo() {
        return tip;
    }

    public static void setTipo(String tipo) {
        PrincipalGestion.tip = tipo;
    }

    public static String getAccion() {
        return accion;
    }

    public static void setAccion(String accion) {
        PrincipalGestion.accion = accion;
    }

    public static String getNombre() {
        return nB;
    }

    public static void setNombre(String fila) {
        PrincipalGestion.nB = fila;
    }

    public void rellenarJC(String n) throws SQLException {
        // System.out.println("-/" + valor);

        if (n == "Marca") {
            //btnEliminar.setVisible(false);
            pnlRecambio.setVisible(false);
            lbl1.setText(n);
            lbl1.setText("Modelo");
            int i = 0;
            int num = 0;
            Statement s = conexion.createStatement();
            ResultSet rs = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM  marca ma ");
            while (rs.next()) {
                num++;
            }
            ResultSet query = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM  marca ma ");
            String[] marcas = new String[num];

            while (query.next()) {
                //System.out.println(" " + query.getString(1));
                marcas[i] = query.getString(1);
                i++;

            }
            for (int j = 0; j < marcas.length; j++) {
                //System.out.println(marcas[j]);
                cbMarca.addItem(marcas[j]);
            }

        }
        //
        if (n == "Pieza") {
            pnlRecambio.setVisible(false);
            btnEliminar.setVisible(false);
            cbModelo.setVisible(false);
            lbl2.setVisible(false);
            //
            lbl1.setText("Tipo");
            int i = 0;
            int num = 0;
            Statement s = conexion.createStatement();
            ResultSet rs = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM tipo ma ");
            while (rs.next()) {
                num++;
            }
            ResultSet query = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM  tipo ma ");
            String[] marcas = new String[num];

            while (query.next()) {
                //System.out.println(" " + query.getString(1));
                marcas[i] = query.getString(1);
                i++;

            }
            for (int j = 0; j < marcas.length; j++) {
                //System.out.println(marcas[j]);
                cbMarca.addItem(marcas[j]);
            }

        }
        if (n == "Recambio") {
            jPanel3.setVisible(false);
        }

    }

    public final void rellenarTabla(String n) throws SQLException {
        Statement s = conexion.createStatement();
        //n = n.toLowerCase();
        System.out.println(n);
        if (n == "Pieza") {
            Object nuevaFila[] = {"Tipo", "Pieza"};
            modelo.setColumnIdentifiers(nuevaFila);
            ResultSet rs = s.executeQuery("SELECT  ma.Nombre , mo.Nombre "
                    + "                    FROM tipo mo, pieza ma"
                    + "                    WHERE mo.P_Tipo=ma.A_Tipo");

            while (rs.next()) {

                Object[] fila = new Object[2];
                for (int i = 0; i < 2; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
            }
        } else {
            if (n == "Marca") {
                Object nuevaFila[] = {"Marca ", "Modelo", "Año de salida", "Año de fin"};
                modelo.setColumnIdentifiers(nuevaFila);
                ResultSet rs = s.executeQuery("SELECT  ma.Nombre , mo.Nombre , mo.AnoSalida , mo.AnoExtincion"
                        + "                    FROM marca ma , modelo mo "
                        + "                     WHERE ma.P_Marca = mo.A_Marca");

                while (rs.next()) {

                    Object[] fila = new Object[4];
                    for (int i = 0; i < 4; i++) {
                        fila[i] = rs.getObject(i + 1);
                        //System.out.println("file: " + fila[i]);
                    }
                    modelo.addRow(fila);
                }
            }
            if (n == "Recambio") {
                Object nuevaFila[] = {"Recambio", "Marca", "Modelo", "Desguace", "Cantidad disponible", "Precio"};
                modelo.setColumnIdentifiers(nuevaFila);

                ResultSet rs = s.executeQuery("SELECT  p.`Nombre`, ma.`Nombre` , mo.Nombre , d.Nombre,  r.CantidadDisponible , r.Precio\n"
                        + "FROM recambio r, pieza p, modelo mo , marca ma, desguace d, motor m, modelomotor mm\n"
                        + "WHERE r.`A_Motor`=m.`P_Motor`\n"
                        + "AND r.`A_Pieza`=p.`P_Pieza`\n"
                        + "AND r.`A_Desguace`=d.`P_Desguace`\n"
                        + "AND m.`P_Motor`=mm.`A_Motor` \n"
                        + "AND mo.`P_Modelo` = mm.`A_Modelo`\n"
                        + "AND mo.`A_Marca`=ma.`P_Marca`   ");
                System.out.println(rs);
                while (rs.next()) {
                    Object[] fila = new Object[6];
                    for (int i = 0; i < 6; i++) {
                        fila[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(fila);
                }

            }
        }

    }

    public void eliminar(String dato) throws SQLException {
        //MODIFICAR
        String n = valor.toLowerCase();
        Statement s = conexion.createStatement();
        String eliminar;
        int p = 0;

        ResultSet rs = s.executeQuery("SELECT P_Recambio FROM recambio WHERE Nombre='" + dato + "' ");
        while (rs.next()) {
            p = rs.getInt(1);
            System.out.println(p);
        }
        /*String delete = "DELETE FROM recambio WHERE recambio.P_Recambio = "+p;
        s.executeUpdate(delete);*/
    }

    public void rellenarBotones() {
        int alturaIcon = 50;
        int anchuraIcon = 50;
        ImageIcon añadir = new ImageIcon("iconos/añadir.png");
        ImageIcon añadirDef = new ImageIcon(añadir.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        ImageIcon modificar = new ImageIcon("iconos/modificar.png");
        ImageIcon modificarDef = new ImageIcon(modificar.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        ImageIcon eliminar = new ImageIcon("iconos/eliminar.png");
        ImageIcon eliminarDef = new ImageIcon(eliminar.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        ImageIcon buscar = new ImageIcon("iconos/buscar.png");
        ImageIcon buscarDef = new ImageIcon(buscar.getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));

        ImageIcon volver = new ImageIcon("iconos/logout.png");
        ImageIcon volverDef = new ImageIcon(volver.getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT));

        ImageIcon icon = new ImageIcon("iconos/reparacion.png");
        ImageIcon iconDef = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));

        Image rIcon = Toolkit.getDefaultToolkit().getImage("iconos/reparacion.png");
        this.setIconImage(rIcon);

        btnAñadir.setIcon(añadirDef);
        btnModificar.setIcon(modificarDef);
        btnEliminar.setIcon(eliminarDef);
        btnBuscar.setIcon(buscarDef);
        btnVolver.setIcon(volverDef);
        icono.setIcon(iconDef);
    }

}
